trigger:
- main

resources:
- repo: self

variables:
  # Azure Container Registry (ACR) & Kubernetes Configurations
  dockerRegistryServiceConnection: 'd3f8286e-763e-4024-b34e-cd76393c66f2'
  imageRepository: 'yamlaks'
  containerRegistry: 'azuredevopscourse.azurecr.io'
  dockerfilePath: '**/Dockerfile'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'azuredevopscourse1744a431-auth'
  
  # Self-hosted agent pool
  agentPoolName: 'Default'

  # Name of the new namespace being created for PR changes
  k8sNamespaceForPR: 'review-app-$(System.PullRequest.PullRequestId)'

stages:
# ðŸ”¹ Build Stage
- stage: Build
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build and Push Image
    pool:
      name: $(agentPoolName)  # Use Self-Hosted Pool
    steps:
    - task: Docker@2
      displayName: Build and push image to ACR
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)

    - task: PublishBuildArtifacts@1
      displayName: Publish Kubernetes Manifests
      inputs:
        PathtoPublish: 'manifests'
        ArtifactName: 'manifests'
        publishLocation: 'Container'

# ðŸ”¹ Deploy Stage
- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build

  jobs:
  - deployment: Deploy
    condition: and(succeeded(), not(startsWith(variables['Build.SourceBranch'], 'refs/pull/')))
    displayName: Deploy to AKS
    pool:
      name: $(agentPoolName)  # Use Self-Hosted Pool
    environment: 'faizulkhan56yamlwithaks-1567.default'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes Cluster
            inputs:
              action: deploy
              manifests: |
                $(Pipeline.Workspace)/manifests/deployment.yml
                $(Pipeline.Workspace)/manifests/service.yml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)

# ðŸ”¹ Deploy Pull Request Stage (Review App)
- stage: DeployPullRequest
  displayName: Deploy Pull Request
  dependsOn: Build
  condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/pull/'))

  jobs:
  - deployment: DeployPR
    displayName: Deploy PR Namespace
    pool:
      name: $(agentPoolName)  # Use Self-Hosted Pool
    environment: 'faizulkhan56yamlwithaks-1567.$(k8sNamespaceForPR)'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: Kubernetes@1
            displayName: 'Create a new namespace for the PR'
            inputs:
              command: apply
              useConfigurationFile: true
              inline: '{ "kind": "Namespace", "apiVersion": "v1", "metadata": { "name": "$(k8sNamespaceForPR)" }}'

          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              namespace: $(k8sNamespaceForPR)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

          - task: KubernetesManifest@0
            displayName: Deploy PR to Kubernetes
            inputs:
              action: deploy
              namespace: $(k8sNamespaceForPR)
              manifests: |
                $(Pipeline.Workspace)/manifests/deployment.yml
                $(Pipeline.Workspace)/manifests/service.yml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)

          - task: Kubernetes@1
            name: get
            displayName: 'Get services in the PR namespace'
            continueOnError: true
            inputs:
              command: get
              namespace: $(k8sNamespaceForPR)
              arguments: svc
              outputFormat: jsonpath='http://{.items[0].status.loadBalancer.ingress[0].ip}:{.items[0].spec.ports[0].port}'

          - script: |
              url="$(get.KubectlOutput)"
              message="Your review app has been deployed"
              if [ ! -z "$url" -a "$url" != "http://:" ]
              then
                message="${message} and is available at $url.<br><br>[Learn More](https://aka.ms/testwithreviewapps)"
              fi
              echo "##vso[task.setvariable variable=GITHUB_COMMENT]$message"
